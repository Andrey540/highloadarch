syntax = "proto3";
package api;

option go_package = "./;conversation";
option php_namespace = "Api\\Grpc\\Conversation";
option php_metadata_namespace = "Api\\Grpc\\Conversation";

// Annotations required for gprc-gateway which transforms GRPC into REST API
// See https://grpc-ecosystem.github.io/grpc-gateway/
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "google/protobuf/empty.proto";

service Conversation {
  rpc StartConversation (StartConversationRequest) returns (StartConversationResponse) {
    option (google.api.http) = {
      post: "/conversation/api/v1/start"
      body: "*"
    };
  }

  rpc GetConversation (GetConversationRequest) returns (GetConversationResponse) {
    option (google.api.http) = {
      post: "/conversation/api/v1/info"
      body: "*"
    };
  }

  rpc ListConversations (ListConversationsRequest) returns (ListConversationsResponse) {
    option (google.api.http) = {
      get: "/conversation/api/v1/list"
    };
  }

  rpc AddMessage (AddMessageRequest) returns (AddMessageResponse) {
    option (google.api.http) = {
      post: "/conversation/api/v1/message/add"
      body: "*"
    };
  }

  rpc ListMessages (ListMessagesRequest) returns (ListMessagesResponse) {
    option (google.api.http) = {
      get: "/conversation/api/v1/conversation"
    };
  }

  rpc ReadMessages (ReadMessagesRequest) returns (google.protobuf.Empty) {
    option (google.api.http) = {
      post: "/conversation/api/v1/message/read"
      body: "*"
    };
  }
}

message ListConversationsRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["user"]
    }
  };
  string user = 1;
}

message ListConversationsResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["conversations"]
    }
  };
  repeated UserConversation conversations = 1;
}

message StartConversationRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["user", "target"]
    }
  };
  string user = 1;
  string target = 2;
}

message StartConversationResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["conversationID"]
    }
  };
  string conversationID = 1;
}

message GetConversationRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["conversationID"]
    }
  };
  string conversationID = 1;
}

message GetConversationResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["companionID"]
    }
  };
  string companionID = 1;
}

message AddMessageRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["conversationID", "text"]
    }
  };
  string conversationID = 1;
  string text = 2;
}

message AddMessageResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["messageID"]
    }
  };
  string messageID = 1;
}

message ReadMessagesRequest {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["conversationID", "messages"]
    }
  };
  string conversationID = 1;
  repeated string messages = 2;
}

message ListMessagesRequest {
  string conversationID = 1 [(grpc.gateway.protoc_gen_swagger.options.openapiv2_field) = {required: ["conversationID"];}];
}

message ListMessagesResponse {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["messages"]
    }
  };
  repeated Message messages = 1;
}

message UserConversation {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "userID"]
    }
  };
  string id = 1;
  string userID = 2;
}

message Message {
  option (grpc.gateway.protoc_gen_swagger.options.openapiv2_schema) = {
    json_schema: {
      required: ["id", "conversationID", "userID", "text", "unread"]
    }
  };
  string id = 1;
  string conversationID = 2;
  string userID = 3;
  string text = 4;
  bool unread = 5;
}